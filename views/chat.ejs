<!DOCTYPE html>
<html id="main_window">
  <title>Connect.io! - Chat View</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.js"></script>

  <body>

    <!-- TODO -->
    <!-- Note: * indicates priority features
     |x| - *Add a scroll-bar to chat log window
     |x| - *Add auto-scroll feature in chat window to keep recent messages in view
     |x| - *Define chat chat window viewport to contain overflow text
     |x| - Add chat indicator when user leaves chat/closes browser
     |x| - Add chat indicator when user joins chat
     || - Clean up styling, move to designated css files
     |x| - Add chat indicator for when a user is typing a message
     || - Add side-bar with currently active/logged-in user handles
     |x| - Handle message send when user activates enter key in message input
     |x| - Clean up chat label and message styling so that they have more aesthetic spacing/dont look so cluttered
     |x| - Add styling for chat messages so that they show some delineation between one another, (individual messages should be discernable at a glance)
     |x| - Add unique appearance for messages originating from a specific user so that messages from multiple users can be discerned at a glance
    -->


    <style>
      html{
        height: 100%;;
        min-width: 200px;
        font-family: 'Ubuntu Condensed', sans-serif;
      }
      header{
        width: auto;
        height: 10%;
        min-height: 70px;
        background-color: #1B9CA1;
        color: white;
        padding-top: 2%;
        padding-bottom: 2%;
        padding-left: 5%;
        border-radius: 3px;
      }
      button{
        border-radius: 5px;
        border: 0px;
        background-color: rgb(88, 184, 187);
        color: white;
      }
    
      button:hover{
        box-shadow: 0 5px rgb(96, 100, 100);
        transform: translateY(4px);
      }
      body{
        height:75%;
      }
      #main-content{
        height: 50%;
      }
      #chat-header{
        vertical-align: middle;
      }
      #chat-area{
        border-radius: 5px;
        min-width: 172px;
        width: 95%; 
        height: auto; 
        display: block;
        padding: 5px;
        overflow-wrap: break-word;
      }
      #chat-container{
        overflow-y: scroll;
        overflow-x: hidden;
        border-radius: 5px;
        min-width: 175px;
        width: 50%; 
        height: 100%; 
        display: block;
        border: solid 1px rgb(88, 184, 187);
      }
      #chat-indicator {
        padding: 1px 0px 1px 5px;
        /* background-color: rgb(35, 184, 187); */
        opacity: .7;
        margin: 3px 0px 0px 1px;
        border-radius: 7px;
        max-width: 40%;
        width: fit-content;
        /* color: white; */
        color: rgb(110, 196, 199);
        font-size: 75%;
        min-height: 14px;
      }
      #message_input_div{
        width: 51%;
      }

      #message_input{
        padding-left: 5px;
        margin-top: 3px;
        margin-right: 10PX;
        margin-bottom: 3px;
        border: solid 1px rgb(88, 184, 187);
        border-radius: 3px;
        width: 50%;
        min-width: 170px;
      }
      .chat_message_p{
        border: solid 1px rgb(88, 184, 187);
        margin: 5px;
        padding: 5px;
        border-radius: 5px;
      }
      .connected_notification{
        text-align: center;
        color: white;
        background-color: rgb(88, 184, 187);
      }
      .disconnect_notification{
        text-align: center;
        color: white;
        background-color: rgb(120, 126, 128);
      }
      .chatarea_label{
        color: rgb(88, 184, 187);
        font-weight: bold;
      }
      
      
      
      ::-webkit-scrollbar {
      width: 12px;
      height: 12px;
      }

      ::-webkit-scrollbar-track {
      box-shadow: inset 0 0 10px rgb(76, 188, 192);
      border-radius: 10px;
      }

      ::-webkit-scrollbar-thumb {
      border-radius: 10px;
      background: rgb(76, 188, 192);
      box-shadow: inset 0 0 6px rgb(8, 97, 100);
      }

    </style>

    <header>
      <div id="chat_header">
        <h2>Connect.io chat</h2>
      </div>
    </header>

    <div id="main-content">

      <h4>Hi, <%= username %>!</h4>

      <input type="hidden" id="username" value="<%= username %>">
      <input type="hidden" id="unq_color" value="<%= unq_color %>">

      <label class="chatarea_label">Chat log:
        <div id="chat-container">
            <div id="chat-area"></div>
        </div>
      </label>

      <div id="chat-indicator"></div>
      
      <div id="message_input_div">
        <input type="text" id="message_input" placeholder="type message here" >

        <button id="send_btn">Send</button>
      </div>

    </div>

    <script>
      var socket = io.connect('http://192.168.1.3:7777');

      //AWS server instance
      //ec2-18-218-46-245.us-east-2.compute.amazonaws.com

      //send message to server console to monitor user logins
      socket.emit('connected', {
          socket_id: socket.id,
          username: document.getElementById('username').value
        });

      var chat_area = document.getElementById("chat-area");
      var chat_container = document.getElementById("chat-container");
      var message_out = document.getElementById("message_input").value;
      var message_input = document.getElementById("message_input");
      var btn = document.getElementById('send_btn');
      var chat_indicator = document.getElementById('chat-indicator');

      //auto scroll newest messages into view
      function chat_auto_scroll(element_to_scroll){
        element_to_scroll.scrollIntoView(false);

        console.log('auto scrolled? element: ' + element_to_scroll.id);
      };

      //Send message
      function sendMessage(){
        socket.emit('chat', {
          username: document.getElementById("username").value,
          message: document.getElementById("message_input").value,
          unique_chat_color: document.getElementById("unq_color").value,
        });
        
        document.getElementById("message_input").value = "";
      };

      //Send message on Enter
      message_input.addEventListener('keydown', key => {

        if(key.keyCode === 13){
          sendMessage(); 
        } 

      });

      btn.addEventListener('click', function(){
        sendMessage();
      });

      socket.on('connected', user => {

        var p_tag = document.createElement("p");
          p_tag.classList.add("chat_message_p");
          p_tag.classList.add("connected_notification");
          p_tag.innerHTML += user.username + " has joined the chat!";
          chat_area.appendChild(p_tag);

        chat_auto_scroll(chat_area);

      });

      socket.on('disconnecting', user => {
        console.log(user + 'is leaving');
        socket.emit('disconnecting', username);
      });

      socket.on('disconnected', user => {

        var disc_user = user;

        var p_tag = document.createElement("p");
          p_tag.classList.add("chat_message_p");
          p_tag.classList.add("disconnect_notification");
          p_tag.innerHTML = (disc_user + " has left the chat..");
          chat_area.appendChild(p_tag);

        //chat_auto_scroll(chat_area);
          chat_auto_scroll(chat_area);
      });

      message_input.addEventListener('keypress', (key) => {

        if(key.keyCode !== 13){
            socket.emit('typing', {
              username: username.value
            })
        }
      });

      var users_typing = [];
      

      socket.on('chat', data => {

        users_typing = [];

        var chat_color = data.unique_chat_color;

        var p_tag = document.createElement("p");
          p_tag.style.backgroundColor = chat_color;
          p_tag.classList.add("chat_message_p");
          p_tag.innerHTML += data.username + ': ' + data.message;
          chat_area.appendChild(p_tag);

        chat_indicator.innerHTML = '';

        //auto scroll chat
        chat_auto_scroll(chat_area);

        console.log(data);
      });

      socket.on('typing', users => {
        if(users.includes(username.value)){
          var indexOfVal = users.indexOf(username.value);
          users.splice(indexOfVal, 1);
        }

        users_typing = users;
        
        var typing_msg;

        if(users_typing.length === 1){
          typing_msg = users_typing[0] + ' is typing..';
        }
        else if(users_typing.length === 2){
          typing_msg = users_typing[0] + ' and ' +users_typing[1] + ' are typing..';
        }else if(users_typing.length > 2){
          typing_msg = 'multiple users typing..';
        }

        chat_indicator.innerHTML = typing_msg;
      });

    </script>

  </body>
</html>
